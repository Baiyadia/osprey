<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kaiqi.osprey.service.dao.UserRepository">
  <!-- CodeBuilder Generated -->
  <resultMap id="UserMap" type="com.kaiqi.osprey.service.domain.User">
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="open_id" property="openId" jdbcType="VARCHAR" />
    <result column="parent_id" property="parentId" jdbcType="BIGINT" />
    <result column="nickname" property="nickname" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="mobile" property="mobile" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="trade_password_crypto_hash" property="tradePasswordCryptoHash" jdbcType="VARCHAR" />
    <result column="area_code" property="areaCode" jdbcType="INTEGER" />
    <result column="register_type" property="registerType" jdbcType="INTEGER" />
    <result column="anti_phishing_code" property="antiPhishingCode" jdbcType="VARCHAR" />
    <result column="reg_ip" property="regIp" jdbcType="VARCHAR" />
    <result column="last_login_ip" property="lastLoginIp" jdbcType="VARCHAR" />
    <result column="device_id" property="deviceId" jdbcType="VARCHAR" />
    <result column="trade_pass_update" property="tradePassUpdate" jdbcType="TIMESTAMP" />
    <result column="contact_count" property="contactCount" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" suffix=")" prefixOverrides="and">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Table_Name">
    user
  </sql>
  <sql id="Base_Column_List_Without_Id">
    user_id, open_id, parent_id, nickname, email, mobile, password, trade_password_crypto_hash, 
    area_code, register_type, anti_phishing_code, reg_ip, last_login_ip, device_id, trade_pass_update, 
    contact_count, status, create_time, update_time
  </sql>
  <sql id="Base_Column_List">
    id, 
    <include refid="Base_Column_List_Without_Id" />
  </sql>
  <sql id="Insert_Columns">
    <if test="record.userId != null">
      user_id,
    </if>
    <if test="record.openId != null">
      open_id,
    </if>
    <if test="record.parentId != null">
      parent_id,
    </if>
    <if test="record.nickname != null">
      nickname,
    </if>
    <if test="record.email != null">
      email,
    </if>
    <if test="record.mobile != null">
      mobile,
    </if>
    <if test="record.password != null">
      password,
    </if>
    <if test="record.tradePasswordCryptoHash != null">
      trade_password_crypto_hash,
    </if>
    <if test="record.areaCode != null">
      area_code,
    </if>
    <if test="record.registerType != null">
      register_type,
    </if>
    <if test="record.antiPhishingCode != null">
      anti_phishing_code,
    </if>
    <if test="record.regIp != null">
      reg_ip,
    </if>
    <if test="record.lastLoginIp != null">
      last_login_ip,
    </if>
    <if test="record.deviceId != null">
      device_id,
    </if>
    <if test="record.tradePassUpdate != null">
      trade_pass_update,
    </if>
    <if test="record.contactCount != null">
      contact_count,
    </if>
    <if test="record.status != null">
      status,
    </if>
    <if test="record.createTime != null">
      create_time,
    </if>
    <if test="record.updateTime != null">
      update_time,
    </if>
  </sql>
  <sql id="Insert_Values">
    <if test="record.userId != null">
      #{record.userId,jdbcType=BIGINT},
    </if>
    <if test="record.openId != null">
      #{record.openId,jdbcType=VARCHAR},
    </if>
    <if test="record.parentId != null">
      #{record.parentId,jdbcType=BIGINT},
    </if>
    <if test="record.nickname != null">
      #{record.nickname,jdbcType=VARCHAR},
    </if>
    <if test="record.email != null">
      #{record.email,jdbcType=VARCHAR},
    </if>
    <if test="record.mobile != null">
      #{record.mobile,jdbcType=VARCHAR},
    </if>
    <if test="record.password != null">
      #{record.password,jdbcType=VARCHAR},
    </if>
    <if test="record.tradePasswordCryptoHash != null">
      #{record.tradePasswordCryptoHash,jdbcType=VARCHAR},
    </if>
    <if test="record.areaCode != null">
      #{record.areaCode,jdbcType=INTEGER},
    </if>
    <if test="record.registerType != null">
      #{record.registerType,jdbcType=INTEGER},
    </if>
    <if test="record.antiPhishingCode != null">
      #{record.antiPhishingCode,jdbcType=VARCHAR},
    </if>
    <if test="record.regIp != null">
      #{record.regIp,jdbcType=VARCHAR},
    </if>
    <if test="record.lastLoginIp != null">
      #{record.lastLoginIp,jdbcType=VARCHAR},
    </if>
    <if test="record.deviceId != null">
      #{record.deviceId,jdbcType=VARCHAR},
    </if>
    <if test="record.tradePassUpdate != null">
      #{record.tradePassUpdate,jdbcType=TIMESTAMP},
    </if>
    <if test="record.contactCount != null">
      #{record.contactCount,jdbcType=INTEGER},
    </if>
    <if test="record.status != null">
      #{record.status,jdbcType=INTEGER},
    </if>
    <if test="record.createTime != null">
      #{record.createTime,jdbcType=TIMESTAMP},
    </if>
    <if test="record.updateTime != null">
      #{record.updateTime,jdbcType=TIMESTAMP},
    </if>
  </sql>
  <sql id="Batch_Insert_Values">
    #{record.userId,jdbcType=BIGINT},
    #{record.openId,jdbcType=VARCHAR},
    #{record.parentId,jdbcType=BIGINT},
    #{record.nickname,jdbcType=VARCHAR},
    #{record.email,jdbcType=VARCHAR},
    #{record.mobile,jdbcType=VARCHAR},
    #{record.password,jdbcType=VARCHAR},
    #{record.tradePasswordCryptoHash,jdbcType=VARCHAR},
    #{record.areaCode,jdbcType=INTEGER},
    #{record.registerType,jdbcType=INTEGER},
    #{record.antiPhishingCode,jdbcType=VARCHAR},
    #{record.regIp,jdbcType=VARCHAR},
    #{record.lastLoginIp,jdbcType=VARCHAR},
    #{record.deviceId,jdbcType=VARCHAR},
    #{record.tradePassUpdate,jdbcType=TIMESTAMP},
    #{record.contactCount,jdbcType=INTEGER},
    #{record.status,jdbcType=INTEGER},
    #{record.createTime,jdbcType=TIMESTAMP},
    #{record.updateTime,jdbcType=TIMESTAMP},
  </sql>
  <sql id="Batch_Insert_Values_On_DuplicateKey">
    #{record.id,jdbcType=BIGINT},
    <include refid="Batch_Insert_Values" />
  </sql>
  <sql id="Update_Set_From_Bean">
    <if test="record.userId != null">
      user_id = #{record.userId,jdbcType=BIGINT},
    </if>
    <if test="record.openId != null">
      open_id = #{record.openId,jdbcType=VARCHAR},
    </if>
    <if test="record.parentId != null">
      parent_id = #{record.parentId,jdbcType=BIGINT},
    </if>
    <if test="record.nickname != null">
      nickname = #{record.nickname,jdbcType=VARCHAR},
    </if>
    <if test="record.email != null">
      email = #{record.email,jdbcType=VARCHAR},
    </if>
    <if test="record.mobile != null">
      mobile = #{record.mobile,jdbcType=VARCHAR},
    </if>
    <if test="record.password != null">
      password = #{record.password,jdbcType=VARCHAR},
    </if>
    <if test="record.tradePasswordCryptoHash != null">
      trade_password_crypto_hash = #{record.tradePasswordCryptoHash,jdbcType=VARCHAR},
    </if>
    <if test="record.areaCode != null">
      area_code = #{record.areaCode,jdbcType=INTEGER},
    </if>
    <if test="record.registerType != null">
      register_type = #{record.registerType,jdbcType=INTEGER},
    </if>
    <if test="record.antiPhishingCode != null">
      anti_phishing_code = #{record.antiPhishingCode,jdbcType=VARCHAR},
    </if>
    <if test="record.regIp != null">
      reg_ip = #{record.regIp,jdbcType=VARCHAR},
    </if>
    <if test="record.lastLoginIp != null">
      last_login_ip = #{record.lastLoginIp,jdbcType=VARCHAR},
    </if>
    <if test="record.deviceId != null">
      device_id = #{record.deviceId,jdbcType=VARCHAR},
    </if>
    <if test="record.tradePassUpdate != null">
      trade_pass_update = #{record.tradePassUpdate,jdbcType=TIMESTAMP},
    </if>
    <if test="record.contactCount != null">
      contact_count = #{record.contactCount,jdbcType=INTEGER},
    </if>
    <if test="record.status != null">
      status = #{record.status,jdbcType=INTEGER},
    </if>
    <if test="record.createTime != null">
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
    </if>
    <if test="record.updateTime != null">
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
    </if>
  </sql>
  <!-- insert -->
  <insert id="insert" parameterType="java.util.Map">
    <selectKey resultType="java.lang.Long" keyProperty="record.id" order="AFTER">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into 
    <include refid="Table_Name" />
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <include refid="Insert_Columns" />
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <include refid="Insert_Values" />
    </trim>
  </insert>
  <insert id="batchInsert" parameterType="java.util.Map">
    insert into 
    <include refid="Table_Name" />
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <include refid="Base_Column_List_Without_Id" />
    </trim>
    values 
    <foreach collection="records" item="record" index="index" separator=",">
      <trim prefix="(" suffix=")" suffixOverrides=",">
        <include refid="Batch_Insert_Values" />
      </trim>
    </foreach>
  </insert>
  <insert id="batchInsertOnDuplicateKey" parameterType="java.util.Map">
    insert into 
    <include refid="Table_Name" />
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <include refid="Base_Column_List" />
    </trim>
    values 
    <foreach collection="records" item="record" index="index" separator=",">
      <trim prefix="(" suffix=")" suffixOverrides=",">
        <include refid="Batch_Insert_Values_On_DuplicateKey" />
      </trim>
    </foreach>
    ON DUPLICATE KEY UPDATE
    user_id = VALUES(user_id), open_id = VALUES(open_id), parent_id = VALUES(parent_id), nickname = VALUES(nickname), email = VALUES(email), mobile = VALUES(mobile), password = VALUES(password), trade_password_crypto_hash = VALUES(trade_password_crypto_hash), area_code = VALUES(area_code), register_type = VALUES(register_type), anti_phishing_code = VALUES(anti_phishing_code), reg_ip = VALUES(reg_ip), last_login_ip = VALUES(last_login_ip), device_id = VALUES(device_id), trade_pass_update = VALUES(trade_pass_update), contact_count = VALUES(contact_count), status = VALUES(status), create_time = VALUES(create_time), update_time = VALUES(update_time)
  </insert>
  <!-- end insert -->
  <!-- delete -->
  <delete id="deleteById" parameterType="java.util.Map">
    delete from 
    <include refid="Table_Name" />
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="java.util.Map">
    delete from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <delete id="deleteIn" parameterType="java.util.Map">
    delete from 
    <include refid="Table_Name" />
    where id in 
    <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
      #{record.id,jdbcType=BIGINT}
    </foreach>
  </delete>
  <!-- end delete -->
  <!-- update -->
  <update id="updateById" parameterType="java.util.Map">
    update 
    <include refid="Table_Name" />
    <set>
      <include refid="Update_Set_From_Bean" />
    </set>
    where id = #{record.id,jdbcType=BIGINT}
  </update>
  <update id="updateByExample" parameterType="java.util.Map">
    update 
    <include refid="Table_Name" />
    <set>
      <include refid="Update_Set_From_Bean" />
    </set>
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
  </update>
  <update id="batchUpdate" parameterType="java.util.Map">
    <foreach collection="records" item="record" index="index" open="" close="" separator=";">
      update 
      <include refid="Table_Name" />
      <set>
        <include refid="Update_Set_From_Bean" />
      </set>
      where id = #{record.id,jdbcType=BIGINT}
    </foreach>
  </update>
  <!-- end update -->
  <!-- select -->
  <select id="selectById" parameterType="java.util.Map" resultMap="UserMap">
    select 
    <include refid="Base_Column_List" />
    from 
    <include refid="Table_Name" />
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectByExample" resultMap="UserMap" parameterType="java.util.Map">
    select
    <if test="example != null and example.distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
  </select>
  <select id="selectOneByExample" resultMap="UserMap" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectIn" resultMap="UserMap" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    from 
    <include refid="Table_Name" />
    where id in 
    <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
      #{record.id,jdbcType=BIGINT}
    </foreach>
  </select>
  <select id="countByExample" parameterType="java.util.Map" resultType="java.lang.Integer">
    select count(1) as total from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <select id="countByPager" parameterType="java.util.Map" resultType="java.lang.Integer">
    select count(1) as total from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <select id="selectByPager" resultMap="UserMap" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="pager.sortItem != null and pager.sortItem != ''">
      order by ${pager.sortItem} ${pager.sortType}
    </if>
    limit #{pager.startIndex} , #{pager.pageSize}
  </select>
  <!-- end select -->
  <!-- My Custom Interfaces -->
</mapper>